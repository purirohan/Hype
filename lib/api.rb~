# this is the api class that stores all api calls
class EventApiObject

	private

	# individual page methods
	def songkick_page(id)

	end

	def meetup_page(id)

	end

	# to track popularity among many apis 
	# usually for friday saturday sunday buttons
	def add_measure(data,attr)
		data.each do |d|
			d["popularityMeasure"] = attr[1] ? d[attr[0]][attr[1]] : d[attr[0]]
		end
	end

	# add image value to hash
	def image_it(imagee,average)
		i = 0
		imageNum = 1
		imagee.each do |s|
			if i == average
				imageNum = imageNum + 1
				i = 0
			end

			if imageNum > 9
				imageNum = 9
			end
			s["mapImageMarker"] = imageNum 
			i = i + 1
		end
	end

	# count the amount of sets in each hash and divide by amount of available images
	def count_it(countee)
		total = countee.count
		@average = total / 9
	end

	def sort_it(sortee,arg)
		sortee.sort! {|x,y| y[arg] <=> x[arg]} 
	end

	def get_http_response(query)
		begin
			request = URI.parse(query)
			request = Net::HTTP.get_response(request).body
		rescue
			return false
		end

		request = JSON.parse(request)
	end


	def get_https(uri)
		mu_request = URI.parse(uri)
		http = Net::HTTP.new(mu_request.host, mu_request.port)
		http.use_ssl = true
		http.verify_mode = OpenSSL::SSL::VERIFY_NONE
		request = Net::HTTP::Get.new(mu_request.request_uri)
		response = http.request(request)
		response = response.body
	end

	def find_overlaps
		# collect geolocations into array
		# if there are repeats change the latitude
		# @dups = {}
		# @dup = []
		# if meetup[2] 
		#   i = 1
		#   while i < 4
		#     # @meetup[i]["results"].each {|m| @lat_array['lat'] += m["venue"]["lat"] if m["venue"] }
		#     i = i + 1
		#   end
		# else
		#   meetup[0]["results"].each do |m| 
		#     if m["venue"]
		#       if @dups.has_key? m["venue"]["lat"] 
		#         @dups[m["venue"]["lat"]] = @dups[m["venue"]["lat"]]+1
		#       else 
		#         @dups[m["venue"]["lat"]]=1
		#       end 
		#     end
		#   end
		# end

		# repeat offenders
		# @dups.each do |d,v|
		#   if v > 1

		#   end
		# end
	end

	def replace_dups(data,type)
		if type == 'eventbrite'
			data.each do |event|
				event.each do |e|
					ran = rand_nums
					if e["event"]
						if e["event"]["venue"]
							e["event"]["venue"]["latitude"] = e["event"]["venue"]["latitude"] + ran[0]
							e["event"]["venue"]["longitude"] = e["event"]["venue"]["longitude"] + ran[1]
						end
					end
				end
			end
		elsif type == 'active'
			data.each do |a|
				ran = rand_nums
				if a["meta"]["latitude"]
					a["active_lat"] = a["meta"]["latitude"].to_i + ran[0]
					a["active_lon"] = a["meta"]["longitude"].to_i + ran[1]
				end
			end
		elsif type == 'seatgeek'
			data.each do |a|
				ran = rand_nums
				if a["latitude"]
					a["latitude"] = a["latitude"] + ran[0]
					a["longitude"] = a["longitude"] + ran[1]
				end
			end
		elsif type == 'songkick'
			data.each do |a|
				ran = rand_nums
				unless a["location"].nil?
					a["location"]["lat"] = a["location"]["lat"] + ran[0]
					a["location"]["lon"] = a["location"]["lon"]  + ran[1]
				end
			end
		elsif type == 'meetup'
			if data[2]
				i = 1
				while i < 4
					data[i]["results"].each do |a|
						ran = rand_nums
						a["group"]["group_lat"] = a["group"] ? a["group"]["group_lat"] + ran[0] : a["venue"]["latitude"] + ran[0]
						a["group"]["group_lon"] = a["group"] ? a["group"]["group_lon"] + ran[1] : a["venue"]["longitude"] + ran[1]
						i = i + 1
					end
				end
			elsif data[0]["results"]
				data[0]["results"].each do |a|
					ran = rand_nums
					a["group"]["group_lat"] = a["group"] ? a["group"]["group_lat"] + ran[0] : a["venue"]["latitude"] + ran[0] 
					a["group"]["group_lon"] = a["group"] ? a["group"]["group_lon"] + ran[1] : a["venue"]["longitude"] + ran[1]
				end
			end
		end

	end

	def rand_nums
		num = rand(400) + 300
		num2 = rand(300) + 200
		ran = rand(0.05) / num
		ran2 = rand(0.005) / num2

		return [ran,ran2]
	end

end


